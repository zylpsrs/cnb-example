#!/usr/bin/env bash
#set -x
set -eo pipefail

echo "---> Python Buildpack"

# 0. GET ARGS
layers_dir="$1"
env_dir="$2/env"
plan_path="$3"

# 1. LOAD USER-PROVIDED BUILD-TIME ENVIRONMENT VARIABLES
if compgen -G "${env_dir}/*" > /dev/null; then
  for var in ${env_dir}/*; do
    declare -x "$(basename ${var})=$(<${var})"
  done
fi

# 2. INSTALL PYTHON
echo "---> Installing Python"
python_layer_dir="$layers_dir"/python
local_python_version=$(cat ${python_layer_dir}.toml 2>/dev/null | yj -t | jq -r .metadata.version || echo 'not found')
require_python_version=$(cat $plan_path | yj -t | jq -r '.entries[] | select(.name == "python") | .version')
python_url=http://soft.ocp.zyl.io/soft/Python-${require_python_version}.tgz

if [[ $local_python_version != $require_python_version ]]; then
    rm -rf "$python_layer_dir"
    mkdir -p "$python_layer_dir"/env /tmp/python
    wget -qO - "$python_url" | tar pxz -C /tmp/python --strip-components=1

    cd /tmp/python
    gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"
    ./configure \
        --build="$gnuArch" \
        --enable-loadable-sqlite-extensions \
        --enable-optimizations \
        --enable-option-checking=fatal \
        --enable-shared \
        --with-system-expat \
        --with-system-ffi \
        --without-ensurepip \
        --prefix=$python_layer_dir
    make -j "$(nproc)" LDFLAGS="-Wl,--strip-all"
    make install

    cd $python_layer_dir/bin
    ln -s idle3 idle && ln -s pydoc3 pydoc
    ln -s python3 python && ln -s python3-config python-config
    cd

    cat > "${python_layer_dir}.toml" << EOL
launch = true
build = true
cache = true

[metadata]
version = "${require_python_version}"
EOL
fi

# 3. SET DEFAULT START COMMAND
cat >> "${layers_dir}/launch.toml" <<EOL
[[processes]]
type = "web"
command = "python app.py"
EOL
